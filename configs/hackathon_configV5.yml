general:    
  use_uvloop: true    
    
# 1. 保留嵌入模型配置    
embedders:    
  nv-embedqa-e5-v5:    
    _type: nim    
    model_name: nvidia/nv-embedqa-e5-v5    
    api_key: ${NVIDIA_API_KEY}    
    
# 3. 保留内存管理    
memory:    
  research_memory:    
    _type: mem0_memory    
    
functions:    
  # 基础工具层    
  tavily_search:    
    _type: tavily_internet_search    
    description: "使用Tavily进行网络搜索，获取最新研究信息"    
    
  wiki_search:    
    _type: wiki_search    
    max_results: 5    
    description: "搜索Wikipedia获取权威学术背景知识"    
    
  current_time:    
    _type: current_datetime    
    description: "获取当前日期和时间"    
    
  pdf_to_markdown:    
    _type: nvidia_rag    
    base_url: "https://integrate.api.nvidia.com/v1"    
    description: "处理PDF文档并提取学术内容"    
    
  # 4. 替换检索工具 - 使用 nvidia_rag 替代 nemo_retriever    
  document_retrieval:    
    _type: nvidia_rag    
    base_url: "https://integrate.api.nvidia.com/v1"    
    collection_name: "nvidia_api_catalog"    
    top_k: 10    
    description: "从NVIDIA开发者数据库检索相关文档信息"    
  
  # 新增使用嵌入器的工具  
  # arxiv_query:  
  #   _type: webpage_query  
  #   webpage_url: https://arxiv.org  
  #   description: "搜索arXiv学术论文信息。对于学术论文和研究相关问题，必须使用此工具！"  
  #   embedder_name: nv-embedqa-e5-v5  
  #   chunk_size: 512  
      
  nvidia_docs_query:  
    _type: webpage_query  
    webpage_url: https://docs.nvidia.com  
    description: "搜索NVIDIA技术文档。对于NVIDIA技术和API相关问题，必须使用此工具！"  
    embedder_name: nv-embedqa-e5-v5  
    chunk_size: 512  
  
  # scholar_query:  
  #   _type: webpage_query  
  #   webpage_url: https://scholar.google.com  
  #   description: "搜索Google Scholar学术搜索。对于学术引用和研究趋势问题，必须使用此工具！"  
  #   embedder_name: nv-embedqa-e5-v5  
  #   chunk_size: 512  
    
  # 5. 保留记忆管理工具    
  add_research_memory:    
    _type: add_memory    
    memory: research_memory    
    description: "保存重要的研究发现和用户偏好到长期记忆"    
    
  get_research_memory:    
    _type: get_memory    
    memory: research_memory    
    description: "检索之前保存的研究记忆和用户偏好"    
    
  # 专业化智能体层    
  research_collector:    
    _type: react_agent    
    # tool_names: [tavily_search, wiki_search, current_time, document_retrieval, get_research_memory, arxiv_query, nvidia_docs_query, scholar_query]    
    tool_names: [tavily_search, wiki_search, current_time, document_retrieval, get_research_memory, nvidia_docs_query]    
    llm_name: study_llm    
    verbose: true    
    max_tool_calls: 10    
    parse_agent_response_max_retries: 3    
    system_prompt: |    
      你是一个专业的学术研究收集专家。当用户询问某个研究领域时，你需要：    
      1. 首先使用get_research_memory检索相关的历史研究记忆    
      2. 使用nvidia_docs_query搜索NVIDIA相关的技术文档  
      3. 使用document_retrieval从NVIDIA开发者数据库检索相关文档    
      4. 使用tavily_search搜索最新的研究论文和进展    
      5. 使用wiki_search获取该领域的基础知识和背景    
      6. 收集至少3-5个具体的研究方向或论文    
      7. 整理信息时要包含：论文标题、作者、发表时间、主要贡献    
      8. 按重要性和时间顺序组织信息    
      9. 使用add_research_memory保存重要发现    
    
      你可以使用以下工具：    
      {tools}    
    
      工具名称：[{tool_names}]    
    
      你必须严格按照以下ReAct格式进行推理和回答：    
    
      Question: 输入问题    
      Thought: 思考下一步行动    
      Action: 选择工具，必须是 [{tool_names}] 中的一个    
      Action Input: 工具输入参数    
      Observation: 等待工具执行结果    
    
      可以重复多次Thought/Action/Action Input/Observation循环。    
    
      最终回答格式：    
      Thought: 我现在知道最终答案了    
      Final Answer: 最终答案（使用markdown格式，包含清晰的标题和子标题）    
    additional_instructions: |    
      重要：必须严格遵循ReAct格式，不要输出JSON或其他格式。    
      每次都要先写Thought，然后是Action，然后是Action Input。    
    
  content_analyzer:    
    _type: tool_calling_agent    
    # tool_names: [pdf_to_markdown, document_retrieval, arxiv_query, nvidia_docs_query]    
    tool_names: [pdf_to_markdown, document_retrieval, nvidia_docs_query]
    llm_name: study_llm    
    verbose: true    
    additional_instructions: |    
      你是一个文档内容分析专家。输出要包含：    
      - 文档概述    
      - 关键发现    
      - 方法论分析    
      - 实际应用价值    
      - 与现有研究的关联性分析    
    
  knowledge_synthesizer:    
    _type: rewoo_agent    
    tool_names: [research_collector, content_analyzer, add_research_memory]    
    llm_name: study_llm    
    verbose: true    
    description: "综合分析和整合多源学术信息"    
    additional_planner_instructions: |    
      CRITICAL: 你的响应必须是纯JSON数组格式。绝对不要包含：    
      - Markdown代码块（```json 或 ```）    
      - JSON前后的任何解释性文字    
      - 任何格式化字符    
    
      重要：所有工具调用都必须使用 input_message 字段格式！    
      JSON字符串中的引号必须使用双引号，不能使用单引号！    
      tool_input中的input_message应该是简单字符串，避免嵌套JSON结构。    
    
      输出格式示例：    
      [{{"plan":"收集研究信息","evidence":[{{"placeholder":"#E1","tool":"research_collector","tool_input":{{"input_message":"近一年深度学习进展"}}}}]}}]
    
      重要：直接输出JSON数组，不要任何其他内容！    
    additional_solver_instructions: |    
      请用中文回答，生成一份专业的研究报告，包含：    
      1. 执行摘要    
      2. 研究现状分析    
      3. 关键发现和趋势    
      4. 重要论文推荐    
      5. 未来研究方向    
      6. 研究记忆总结（保存到长期记忆）    
    
      使用专业的学术写作风格和markdown格式，确保信息准确性和可读性。    
    
  academic_tutor:    
    _type: reasoning_agent    
    llm_name: study_llm    
    augmented_fn: knowledge_synthesizer    
    verbose: true    
    
llms:    
  study_llm:    
    _type: openai    
    model_name: "gemini-2.5-flash"    
    api_key: ${GOOGLE_API_KEY}    
    base_url: "https://generativelanguage.googleapis.com/v1beta"    
    temperature: 0.6    
    max_tokens: 4096    
    
workflow:    
  _type: reasoning_agent    
  llm_name: study_llm    
  augmented_fn: academic_tutor    
  verbose: true